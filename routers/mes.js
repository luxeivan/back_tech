//–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ç–∞–∫–æ–µ —Å–µ—Ä—å–µ–∑–Ω–æ–µ üòÑ
const express = require("express");
const axios = require("axios");
const FormData = require("form-data");
const dayjs = require("dayjs");

const router = express.Router();

// --- –ö–æ–Ω—Ñ–∏–≥ –∏–∑ .env ---
const BASE = process.env.MES_BASE_URL;              // –Ω–∞–ø—Ä. https://wso2-test.../json-api
const MES_LOGIN = process.env.MES_LOGIN;
const MES_PASSWORD = process.env.MES_PASSWORD;

// –ö–æ–¥—ã –ø–æ –∏—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–µ—Ñ–æ–ª—Ç—ã ‚Äî –ú–û–≠)
const SYS_CONTACT = process.env.MES_SYSTEM_CONTACT || "102"; // 1=–†–ú–†, 2=–ú–û–≠
const KD_CHANNEL  = process.env.MES_CHANNEL || "3";        // 3=–ï–õ–ö–ö –§–õ
const KD_ORG      = process.env.MES_ORG_CODE || "2";       // 2=–ú–û–≠

// --- –£—Ç–∏–ª–∏—Ç—ã ---
function toIsoT(v) {
  if (!v) return null;
  const d = dayjs(v);
  return d.isValid() ? d.format("YYYY-MM-DD[T]HH:mm:ss") : null;
}
function toHuman(v, withTime = false) {
  if (!v) return null;
  const d = dayjs(v);
  if (!d.isValid()) return null;
  return withTime ? d.format("YYYY-MM-DD HH:mm:ss") : d.format("YYYY-MM-DD");
}
function clean(v) {
  if (v === undefined || v === null || v === "" || v === "‚Äî") return null;
  return String(v);
}

// --- –®–∞–≥ 1: auth (–ø–æ–ª—É—á–∏—Ç—å session) ---
async function mesAuth() {
  if (!BASE || !MES_LOGIN || !MES_PASSWORD) {
    throw new Error("MES_* –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env");
  }
  const params = { action: "auth", login: MES_LOGIN, pwd_password: MES_PASSWORD };
  const { data } = await axios.get(BASE, { params, timeout: 15000 });
  const session = data?.data?.[0]?.session;
  if (!session) throw new Error("–ù–µ –ø–æ–ª—É—á–∏–ª–∏ session –æ—Ç –°–£–í–ö");
  return session;
}

// --- –ú–∞–ø–ø–∏–Ω–≥ KD_TP_NOTIFICATION (—Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è) ---
function mapNotification(tn) {
  const raw = tn?.data?.data || {};
  const type = clean(raw.VIOLATION_TYPE || tn?.data?.type) || "";
  const status = clean(raw.STATUS_NAME || tn?.data?.STATUS_NAME) || "";
  const t = type.toLowerCase();
  const s = status.toLowerCase();

  if (t.includes("–ø–ª–∞–Ω") || t === "–ø") return "3";          // –ø–ª–∞–Ω–æ–≤–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
  if (s.includes("–∑–∞–ø–∏—Ç–∞–Ω") || s.includes("–∑–∞–∫—Ä—ã—Ç")) return "2"; // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
  return "1"; // –∞–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
}

// --- –í—ã—Ç—è–Ω—É—Ç—å –ø–µ—Ä–≤—ã–π –§–ò–ê–° –¥–æ–º–∞ (GUID_FIAS_HOUSE) ---
function firstFiasHouse(tn) {
  const raw = tn?.data?.data || {};
  const val = clean(raw.FIAS_LIST || tn?.data?.FIAS_LIST || tn?.data?.house_fias_list);
  if (!val) return null;
  return val.split(/[;,]/).map(s => s.trim()).filter(Boolean)[0] || null;
}

// --- –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Ä–µ–µ—Å—Ç—Ä–∞ –∏–∑ "–ø–ª–æ—Å–∫–æ–≥–æ" MES-–ø–µ–π–ª–æ–∞–¥–∞ ---
function buildRegistryItemFromMesPayload(p, idx = 1) {
  const fias =
    clean(p.fias) ||
    clean(p.Guid2) ||
    clean(p.FIAS_LIST);
  if (!fias) {
    throw new Error("–ù–µ—Ç GUID_FIAS_HOUSE ‚Äî –¥–æ–±–∞–≤—å –ø–æ–ª–µ 'fias' (–∏–ª–∏ Guid2/FIAS_LIST) –≤ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞");
  }

  // –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const st = (clean(p.status) || "").toLowerCase();
  const cond = (clean(p.condition) || "").toLowerCase();
  let kdNotif = "1";
  if (st === "–ø" || st.includes("–ø–ª–∞–Ω")) kdNotif = "3";
  else if (cond.includes("–∑–∞–ø–∏—Ç–∞–Ω") || cond.includes("–∑–∞–∫—Ä—ã—Ç")) kdNotif = "2";

  const item = {
    id_regline_ext: String(p.id_regline_ext || idx),
    kd_tp_client: 1,
    GUID_FIAS_HOUSE: fias,
    KD_TP_NOTIFICATION: kdNotif,
    KD_ORG: KD_ORG,
  };

  const dateOff = toIsoT(p.date_off);
  const datePlanOn = toIsoT(p.date_on_plan);
  const dateFactOn = toIsoT(p.date_on_fact);

  if (dateOff) item.DT_OUTAGE_TIME_PLANNED = dateOff;
  if (kdNotif === "2") {
    if (dateFactOn) item.DT_RESTORATION_TIME_PLANNED = dateFactOn;
    else if (datePlanOn) item.DT_RESTORATION_TIME_PLANNED = datePlanOn;
  } else if (datePlanOn) {
    item.DT_RESTORATION_TIME_PLANNED = datePlanOn;
  }

  const reason = clean(p.massage);
  if (reason) item.NM_REASON = reason.toLowerCase();

  return item;
}

// --- –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Ä–µ–µ—Å—Ç—Ä–∞ (vl_registry[]) ---
function buildRegistryItem(tn, idx = 1) {
  const raw = tn?.data?.data || {};
  const obj = tn?.data || {};

  const dateOff    = toIsoT(raw.F81_060_EVENTDATETIME || obj.createDateTime);
  const datePlanOn = toIsoT(raw.F81_070_RESTOR_SUPPLAYDATETIME || obj.recoveryPlanDateTime);
  const dateFactOn = toIsoT(raw.F81_290_RECOVERYDATETIME || obj.recoveryDateTime);
  const reason     = (clean(obj.description) || clean(raw.DESCRIPTION) || "").toLowerCase();
  const kdNotif    = mapNotification(tn);
  const fias       = firstFiasHouse(tn);

  if (!fias) {
    throw new Error("–ù–µ—Ç GUID_FIAS_HOUSE (FIAS_LIST –ø—É—Å—Ç–æ–π) ‚Äî —Å—Ç—Ä–æ–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω–∞");
  }

  const item = {
    id_regline_ext: String(obj.documentId || obj.id || idx), // –≤–Ω–µ—à–Ω–∏–π id —Å—Ç—Ä–æ–∫–∏
    kd_tp_client: 1,            // 1 = –§–õ (–¥–µ—Ñ–æ–ª—Ç)
    GUID_FIAS_HOUSE: fias,      // –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    KD_TP_NOTIFICATION: kdNotif,// –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    KD_ORG: KD_ORG,             // 2 = –ú–û–≠
  };

  // –î–∞—Ç—ã
  if (dateOff) item.DT_OUTAGE_TIME_PLANNED = dateOff;
  if (kdNotif === "2") {
    // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (dateFactOn) item.DT_RESTORATION_TIME_PLANNED = dateFactOn;
    else if (datePlanOn) item.DT_RESTORATION_TIME_PLANNED = datePlanOn;
  } else if (datePlanOn) {
    item.DT_RESTORATION_TIME_PLANNED = datePlanOn;
  }

  if (reason) item.NM_REASON = reason; // –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

  return item;
}

// --- –®–∞–≥ 2: upload —Ä–µ–µ—Å—Ç—Ä–∞ ---
async function mesUploadRegistry(items) {
  const session = await mesAuth();

  const params = {
    action: "upload",
    query: "FwdRegistryLoad",
    session,
    id_registry_ext: String(Date.now()).slice(-9),   // –≤–Ω–µ—à–Ω–∏–π id —Ä–µ–µ—Å—Ç—Ä–∞
    kd_system_contact: SYS_CONTACT,                  // 2 = –ú–û–≠
    kd_channel: KD_CHANNEL,                          // 3 = –ï–õ–ö–ö –§–õ
    dt_campaign_beg: dayjs().format("YYYY-MM-DD"),
    dt_campaign_end: dayjs().add(3, "day").format("YYYY-MM-DD"),
    id_facility: "1",
    kd_tp_campaign: "SETI_NOTICE",
  };

  const form = new FormData();
  // –≤–∞–∂–µ–Ω –∏–º–µ–Ω–Ω–æ multipart —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—è vl_registry:
  form.append("vl_registry", Buffer.from(JSON.stringify(items, null, 2)), {
    filename: "registry.json",
    contentType: "application/json",
  });

  const { data } = await axios.post(BASE, form, {
    params,
    headers: form.getHeaders(),
    timeout: 30000,
    maxBodyLength: Infinity,
  });

  const idRegistry = data?.data?.[0]?.id_registry;
  if (!idRegistry) {
    throw new Error("–ù–µ –ø–æ–ª—É—á–∏–ª–∏ id_registry –≤ –æ—Ç–≤–µ—Ç–µ –°–£–í–ö");
  }
  return { idRegistry, session, raw: data };
}

// --- –®–∞–≥ 3: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ---
async function mesCheckStatus({ session, idRegistry }) {
  const { data } = await axios.get(BASE, {
    params: { query: "FwdRegistryCheckStatus", session, id_registry: idRegistry },
    timeout: 15000,
  });
  return data;
}

// ===== –†–û–£–¢–´ =====

// –û—Ç–ø—Ä–∞–≤–∫–∞: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç tn/tns (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) –ò–õ–ò "–ø–ª–æ—Å–∫–∏–π" MES-–ø–µ–π–ª–æ–∞–¥; —Å–æ–±–∏—Ä–∞–µ—Ç vl_registry –∏ –≥—Ä—É–∑–∏—Ç –≤ –°–£–í–ö
router.post("/upload", express.json({ limit: "2mb" }), async (req, res) => {
  try {
    const body = req.body || {};
    let items = [];

    // –í–∞—Ä–∏–∞–Ω—Ç 1: —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (tn/tns)
    const list = Array.isArray(body?.tns) ? body.tns : [body?.tn].filter(Boolean);
    if (list.length) {
      items = list.map((tn, i) => buildRegistryItem(tn, i + 1));
    }

    // –í–∞—Ä–∏–∞–Ω—Ç 2: "–ø–ª–æ—Å–∫–∏–π" MES-–ø–µ–π–ª–æ–∞–¥ (date_off...condition + fias/Guid2/FIAS_LIST)
    const looksLikeMes = body && (body.date_off || body.massage || body.status || body.condition || body.fias || body.Guid2 || body.FIAS_LIST);
    if (!items.length && looksLikeMes) {
      items = [buildRegistryItemFromMesPayload(body, 1)];
    }

    if (!items.length) {
      return res.status(400).json({ ok: false, message: "–ü–µ—Ä–µ–¥–∞–π tn/tns –∏–ª–∏ MES-–ø–æ–ª—è (date_off/.../condition) + fias" });
    }

    // –†–µ–∂–∏–º –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: ?dryRun=1 –∏–ª–∏ MES_FAKE=1 ‚Äî –Ω–µ –¥–µ—Ä–≥–∞–µ–º –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
    if (req.query.dryRun === "1" || process.env.MES_FAKE === "1") {
      const fakeId = `TEST-${Date.now()}`;
      console.log(`–ú–æ—Å–≠–Ω–µ—Ä–≥–æ–°–±—ã—Ç DRY-RUN: —Å—Ç—Ä–æ–∫ —Ä–µ–µ—Å—Ç—Ä–∞ = ${items.length}, id_registry = ${fakeId}`);
      return res.json({
        ok: true,
        dryRun: true,
        id_registry: fakeId,
        session: "TEST-SESSION",
        vl_registry: items
      });
    }

    console.log(`–ú–æ—Å–≠–Ω–µ—Ä–≥–æ–°–±—ã—Ç UPLOAD: —Å—Ç—Ä–æ–∫ —Ä–µ–µ—Å—Ç—Ä–∞ = ${items.length}`);
    const { idRegistry, session } = await mesUploadRegistry(items);
    console.log("–ú–æ—Å–≠–Ω–µ—Ä–≥–æ–°–±—ã—Ç: id_registry =", idRegistry);

    return res.json({ ok: true, id_registry: idRegistry, session });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ UPLOAD MES:", e?.message);
    return res.status(502).json({ ok: false, message: e?.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏" });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ session –∏ id_registry
router.get("/status", async (req, res) => {
  try {
    const session = req.query.session;
    const idRegistry = req.query.id_registry;
    if (!session || !idRegistry) {
      return res.status(400).json({ ok: false, message: "–ù—É–∂–Ω—ã session –∏ id_registry" });
    }
    const data = await mesCheckStatus({ session, idRegistry });
    return res.json({ ok: true, data });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ CHECK MES:", e?.message);
    return res.status(502).json({ ok: false, message: e?.message || "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞" });
  }
});

module.exports = router;